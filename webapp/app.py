import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.exc import SQLAlchemyError

# 🎯 Page Setup
st.set_page_config(page_title="Amazon USA Sales Dashboard", layout="wide", page_icon="📦")
st.title("📦 Amazon USA Sales Dashboard")
st.markdown("Explore sales insights with interactive charts and queries 📊")

# 🔌 PostgreSQL connection using psycopg2
@st.cache_resource
def get_engine():
    return create_engine(
        "postgresql+psycopg2://new_postgresql_database_o6b9_user:w6jr1HNZE7jRZUuzNDJEyXIewOWX7Pp8@dpg-d06p6s3uibrs73eqbgn0-a.oregon-postgres.render.com/new_postgresql_database_o6b9"
    )

engine = get_engine()

# 🔍 Query runner
def run_query(query):
    try:
        with engine.connect() as conn:
            return pd.read_sql(query, conn)
    except SQLAlchemyError as e:
        st.error(f"❌ SQL Error:\n\n{str(e)}")
        return pd.DataFrame()

# 📊 Sidebar Navigation
section = st.sidebar.radio("📌 Select Report", [
    "🏆 Top 10 Products",
    "📊 Revenue by Category",
    "📈 Monthly Trend",
    "💳 Payment Status"
])

# 1️⃣ Top Products
if section == "🏆 Top 10 Products":
    st.subheader("🏆 Top 10 Best-Selling Products by Revenue")
    query = """
        SELECT p.product_name, SUM(oi.quantity * oi.price_per_unit) AS total_sales
        FROM order_items oi
        JOIN products p ON oi.product_id = p.product_id
        GROUP BY p.product_name
        ORDER BY total_sales DESC
        LIMIT 10;
    """
    df = run_query(query)
    if not df.empty:
        st.dataframe(df.style.format({"total_sales": "${:,.2f}"}), use_container_width=True)
        st.bar_chart(df.set_index("product_name"))

# 2️⃣ Revenue by Category
elif section == "📊 Revenue by Category":
    st.subheader("📊 Revenue Generated by Product Categories")
    query = """
        SELECT c.category_name, SUM(oi.quantity * oi.price_per_unit) AS revenue
        FROM order_items oi
        JOIN products p ON oi.product_id = p.product_id
        JOIN category c ON p.category_id = c.category_id
        GROUP BY c.category_name
        ORDER BY revenue DESC;
    """
    df = run_query(query)
    if not df.empty:
        st.dataframe(df.style.format({"revenue": "${:,.2f}"}), use_container_width=True)
        st.bar_chart(df.set_index("category_name"))

elif section == "📈 Monthly Trend":
    st.subheader("📈 Monthly Revenue Over Time")
    query = """
        SELECT DATE_TRUNC('month', o.order_date) AS month, 
               SUM(oi.quantity * oi.price_per_unit) AS revenue
        FROM orders o
        JOIN order_items oi ON o.order_id = oi.order_id
        GROUP BY month
        ORDER BY month;
    """
    df = run_query(query)
    if not df.empty:
        df["month"] = pd.to_datetime(df["month"], utc=True).dt.tz_convert(None)
        
        # Convert pandas timestamps to plain Python datetime
        min_date = df["month"].min().to_pydatetime()
        max_date = df["month"].max().to_pydatetime()
        
        # Fix if min_date and max_date are the same
        if min_date == max_date:
            max_date = min_date + pd.Timedelta(days=30)  # Adjust by 30 days if they're the same

        start, end = st.slider(
            "Select Date Range", 
            min_value=min_date, 
            max_value=max_date,
            value=(min_date, max_date),
            format="YYYY-MM"
        )
        
        filtered = df[(df["month"] >= start) & (df["month"] <= end)]
        filtered.set_index("month", inplace=True)
        st.line_chart(filtered)
# 4️⃣ Payment Status
elif section == "💳 Payment Status":
    st.subheader("💳 Payment Status Breakdown")
    query = """
        SELECT payment_status, COUNT(*) AS count
        FROM payments
        GROUP BY payment_status;
    """
    df = run_query(query)
    if not df.empty:
        st.dataframe(df, use_container_width=True)
        st.bar_chart(df.set_index("payment_status"))